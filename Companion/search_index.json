[["welcome.html", "R Packages Companion Welcome Parts of this Companion Suggested Order", " R Packages Companion R4DS Reading Group Last rendered: 2020-12-01 Welcome This book is a companion to R Packages, 2nd ed (WIP), by Hadley Wickham and Jennifer Bryan, and aims to support the reader through a full read-through of the book. It sets out learning objectives as well as collects common questions and answers. This Companion is also a work in progress, and being compiled alongside the first cohort(s) of the R4DS R Packages Book Club. Recordings for the accompanying presentations can be seen on this YouTube playlist. Parts of this Companion This box outlines some Learning Objectives for each chapter. For example: Identify reasons that you might write a package. Become familiar with all of the parts of an R package. This box denotes a question! This box means the supplied answer to the question is fuzzy and could use some work! We love PRs if youd like to help with documentation! Suggested Order We believe there is a different (idea-based) order in which this book should be read if reading every chapter (for example, by a book club) and our first cohort of the book club will be following the order described here! "],["introduction.html", "Chapter 1 Introduction 1.1 Philosophy 1.2 In this book", " Chapter 1 Introduction 1.1 Philosophy Learning objectives: Recall the philosophy that motivates devtools and similar metapackages. 1.2 In this book Learning objectives: Roughly describe the contents of each chapter of this book. Further to this objective, our book club cohort plans to tackle the chapters of the book in a bit of a Machete Order that tries to group similar ideas together: Why should I read this book? Chapter 1: Introduction Chapter 2: The whole game How do I set up my system and get started? Chapter 3: System setup Chapter 4: Package structure and state How should I work on my package? Chapter 5: Fundamental development workflows Chapter 18: Git and GitHub How do I convert a script to a package? Chapter 6: The package within Chapter 11: Vignettes: long-form documentation How do I write functions and document them? Chapter 7: R code Chapter 10: Object documentation Chapter 13: Namespace How do I make sure my package works? Chapter 12: Testing Chapter 19: Automated checking How do I describe my package? Chapter 8: Package metadata Chapter 9: Licensing How do I include things like data or do obscure package-y things? Chapter 14: External data Chapter 15: Compiled code Chapter 16: Installed files Chapter 17: Other components How do I share and promote my package? Chapter 20: Releasing a package (Missing chapter about pkgdown) "],["the-whole-game.html", "Chapter 2 The whole game", " Chapter 2 The whole game Learning objectives: Recognize the package development process. "],["system-setup.html", "Chapter 3 System setup", " Chapter 3 System setup Learning objectives: Understand why you should consider the preview version of Rstudio. Understand how to set up devtools. Understand how to install tools for building packages that contain C or C++ code. "],["package-structure-and-state.html", "Chapter 4 Package structure and state", " Chapter 4 Package structure and state Learning objectives: Name the five states an R package can be in. Define the source state of an R package. Define the bundled state of an R package. Understand how to add files to .Rbuildignore. Define the binary state of an R package. Define the installed state of an R package. Define the in-memory state of an R package. Differentiate between a library and a package in R. Understand why many developers use separate global libraries and user libraries. "],["fundamental-development-workflows.html", "Chapter 5 Fundamental development workflows", " Chapter 5 Fundamental development workflows Learning objectives: Recall the rules for R package names. Use available::available() to check whether a package name works. Use usethis::create_package() to create a package and the associated RStudio Project. List key benefits of working with RStudio Projects. Recognize that exercising path discipline helps you avoid errors as your package changes states. List the benefits of devtools::load_all(). Remember how to quickly call devtools::load_all() in RStudio. "],["the-package-within.html", "Chapter 6 The package within", " Chapter 6 The package within Learning objectives: Understand how to organize scripts into objects and functions. Recognize how to separate analysis from helper functions. Recognize errors that can occur when converting a script to a package. Recognize that top-level R code is executed when a package is built. Be very mindful about changing a users overall state from within a package. "],["r-code.html", "Chapter 7 R code", " Chapter 7 R code Learning objectives: List organizing principles for .R files in a packages R directory. Use devtools::load_all() to check your code. Use the styler package to enforce a code style. Appreciate how build-time execution can cause issues in packages. Understand the dangers of changing the R landscape. Manage state with withr. Restore state with base::on.exit(). Isolate side effects in separate functions. Use .onLoad(), .onAttach(), and .onUnload() to modify the R landscape. Use devtools::document(), devtools::test(), and devtools::check() for fast feedback. Use stringi::stri_escape_unicode() to escape special characters. Use tools::showNonASCII() and tools::showNonASCIIfile() to locate special characters. "],["package-metadata.html", "Chapter 8 Package metadata", " Chapter 8 Package metadata Learning objectives: Fill in DESCRIPTION fields using the DCF format. Describe the difference between Imports and Suggests. Safely use a suggested package within a function in your package. Use usethis::use_package() to add packages to Imports and Suggests. Specify the minimum version of a package in Imports or Suggests. Require a minimum version of R when necessary, using the Depends field. Recognize the LinkingTo field. Recognize the Enhances field. Recognize the SystemRequirements field. Describe the difference between Title and Description. Identify yourself with the Authors@R field. Define the four most important roles: cre, aut, ctb, and cph. Use the URL and BugReports fields to list other resources available for help. Use the License field to specify your packages license. Describe the Version of your package using semantic versioning. Recognize the Collate field. Recognize the LazyData field. "],["licensing.html", "Chapter 9 Licensing", " Chapter 9 Licensing Learning objectives: Describe the difference between permissive licenses and copyleft licenses. Use usethis::use_*_license() to specify your packages license. Understand who holds the copyright for code written on your own time, for your employer, and for contract work. Describe the three ways licenses can be specified in the License field. Describe the MIT license. Describe the Apache license. Describe the LGPL license. Describe the GPL licenses. Describe the AGPL license. Understand the process required to relicense a package. Describe the CC0 license. Describe the CC-BY license. Understand that the copyright of contributed code is usually retained by the author of that code. Determine whether the license of bundled code is compatible with your license. Credit bundled code in Authors@R. Use a LICENSE.note file to disambiguate licensing of bundled code. "],["object-documentation.html", "Chapter 10 Object documentation", " Chapter 10 Object documentation Learning objectives: Recognize the roxygen2 documentation workflow. Use Build &amp; Reload to update more complex documentation. Understand the basic roxygen comment skeleton: title, description, and details. Document a function using roxygen comments. Document a package using roxygen comments. Recognize techniques for documenting classes, generics, and methods. Remember the three special characters in roxygen comments: @, %, and \\. Use @inheritParams to share parameter descriptions between functions. Use @describeIn to merge documentation. Use @rdname to merge documentation. Use the reference sheet to apply advanced formatting to documentation. "],["vignettes.html", "Chapter 11 Vignettes", " Chapter 11 Vignettes Learning objectives: Define a vignette as a long-form guide to your package. Create a vignette with usethis::use_vignette(). Recognize the metadata fields in a vignette. Remember that markdown allows you to format your vignette. Understand how to intermingle R code and text in vignettes. Remember how to view your vignette as it will appear to a user. "],["testing.html", "Chapter 12 Testing", " Chapter 12 Testing Learning objectives: List some benefits of automated testing. Use usethis::use_testhat to set up a package for testing. Implement a package development workflow that includes testing. Understand the relationship between expectations, tests, and test files. Describe the structure of an expectation. Combine expectations into a test. Recognize actions that require manual cleanup during testing. Understand that tests can be skipped in some situations. Know where to look if you need to build your own custom expectations. Use usethis::use_test() to generate a test file. List the caveats about testing on CRAN. "],["namespace.html", "Chapter 13 Namespace", " Chapter 13 Namespace Prerequisite knowledge: Metadata about a package appears in the DESCRIPTION file. The DESCRIPTION can include a Depends field and/or an Imports field. If youre using the Book Clubs recommended Machete Order, you will not have been previously exposed to those prerequisites. Learning objectives: Recognize that package namespaces are important for disambiguating functions and other objects with the same name. Understand what the search path is in R. Use search() to see the search path. Differentiate between loading and attaching. Understand the difference between library(x) and requireNamespace(\"x\", quietly = TRUE). Understand the difference between Depends and Imports in the package DESCRIPTION. Recognize the eight namespace directives: export(), exportPattern(), exportClasses(), S3method(), import(), importFrom(), importClassesFrom(), and useDynLib(). Use roxygen comments to @export a function. Recognize how to define exports for S3, S4, and RC. Differentiate between the DESCRIPTION Imports field and NAMESPACE import() and importFrom(). Understand when to use ::, @importFrom, and @import to import functions from other packages. Remember how to import S4 classes and generics. "],["external-data-wip.html", "Chapter 14 External data (WIP)", " Chapter 14 External data (WIP) Learning objectives: TBD "],["compiled-code-wip.html", "Chapter 15 Compiled code (WIP)", " Chapter 15 Compiled code (WIP) Learning objectives: TBD "],["installed-files-wip.html", "Chapter 16 Installed files (WIP)", " Chapter 16 Installed files (WIP) Learning objectives: TBD "],["other-components-wip.html", "Chapter 17 Other components (WIP)", " Chapter 17 Other components (WIP) Learning objectives: TBD "],["git-and-github.html", "Chapter 18 Git and GitHub", " Chapter 18 Git and GitHub Learning objectives: Understand that Git is a version control system. Understand the difference between a local repository and a remote repository. Understand how to commit your work in Git. Understand how and when to push changes from one repository to another. Understand how and when to pull changes from one repository to another. Understand how to request that someone else pull your changes into their repository. Know some places to look for more information. "],["automated-checking.html", "Chapter 19 Automated checking", " Chapter 19 Automated checking Learning objectives: Run R CMD check with devtools::check() or (in RStudio) Ctrl/Cmd + Shift + E. Describe the difference between ERRORs, WARNINGs, and NOTEs returned by R CMD check. Recognize R CMD check metadata checks. Recognize R CMD check package structure checks and how to fix related errors. Recognize R CMD check description checks and how to fix related errors. Recognize R CMD check namespace checks and how to fix related errors. Recognize R CMD check R code checks and how to fix related errors. Recognize R CMD check data checks and how to fix related errors. Recognize R CMD check documentation checks and how to fix related errors. Recognize R CMD check demo checks and how to fix related errors. Recognize R CMD check compiled code checks and how to fix related errors. Recognize R CMD check test checks and how to fix related errors. Recognize R CMD check vignette checks and how to fix related errors. Use continuous integration to run R CMD check after each commit. "],["releasing-a-package-wip.html", "Chapter 20 Releasing a package (WIP)", " Chapter 20 Releasing a package (WIP) Learning objectives: TBD "]]
